// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	data "gitlab.com/q-dev/q-id/issuer/internal/data"

	pgdb "gitlab.com/distributed_lab/kit/pgdb"
)

// CommittedStatesQ is an autogenerated mock type for the CommittedStatesQ type
type CommittedStatesQ struct {
	mock.Mock
}

// Get provides a mock function with given fields: id
func (_m *CommittedStatesQ) Get(id uint64) (*data.CommittedState, error) {
	ret := _m.Called(id)

	var r0 *data.CommittedState
	if rf, ok := ret.Get(0).(func(uint64) *data.CommittedState); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*data.CommittedState)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGenesis provides a mock function with given fields:
func (_m *CommittedStatesQ) GetGenesis() (*data.CommittedState, error) {
	ret := _m.Called()

	var r0 *data.CommittedState
	if rf, ok := ret.Get(0).(func() *data.CommittedState); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*data.CommittedState)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLatest provides a mock function with given fields:
func (_m *CommittedStatesQ) GetLatest() (*data.CommittedState, error) {
	ret := _m.Called()

	var r0 *data.CommittedState
	if rf, ok := ret.Get(0).(func() *data.CommittedState); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*data.CommittedState)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: committedState
func (_m *CommittedStatesQ) Insert(committedState *data.CommittedState) error {
	ret := _m.Called(committedState)

	var r0 error
	if rf, ok := ret.Get(0).(func(*data.CommittedState) error); ok {
		r0 = rf(committedState)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// New provides a mock function with given fields:
func (_m *CommittedStatesQ) New() data.CommittedStatesQ {
	ret := _m.Called()

	var r0 data.CommittedStatesQ
	if rf, ok := ret.Get(0).(func() data.CommittedStatesQ); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(data.CommittedStatesQ)
		}
	}

	return r0
}

// Select provides a mock function with given fields:
func (_m *CommittedStatesQ) Select() ([]data.CommittedState, error) {
	ret := _m.Called()

	var r0 []data.CommittedState
	if rf, ok := ret.Get(0).(func() []data.CommittedState); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]data.CommittedState)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Sort provides a mock function with given fields: sort
func (_m *CommittedStatesQ) Sort(sort pgdb.SortedOffsetPageParams) data.CommittedStatesQ {
	ret := _m.Called(sort)

	var r0 data.CommittedStatesQ
	if rf, ok := ret.Get(0).(func(pgdb.SortedOffsetPageParams) data.CommittedStatesQ); ok {
		r0 = rf(sort)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(data.CommittedStatesQ)
		}
	}

	return r0
}

// Update provides a mock function with given fields: committedState
func (_m *CommittedStatesQ) Update(committedState *data.CommittedState) error {
	ret := _m.Called(committedState)

	var r0 error
	if rf, ok := ret.Get(0).(func(*data.CommittedState) error); ok {
		r0 = rf(committedState)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WhereStatus provides a mock function with given fields: status
func (_m *CommittedStatesQ) WhereStatus(status data.Status) data.CommittedStatesQ {
	ret := _m.Called(status)

	var r0 data.CommittedStatesQ
	if rf, ok := ret.Get(0).(func(data.Status) data.CommittedStatesQ); ok {
		r0 = rf(status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(data.CommittedStatesQ)
		}
	}

	return r0
}

type mockConstructorTestingTNewCommittedStatesQ interface {
	mock.TestingT
	Cleanup(func())
}

// NewCommittedStatesQ creates a new instance of CommittedStatesQ. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCommittedStatesQ(t mockConstructorTestingTNewCommittedStatesQ) *CommittedStatesQ {
	mock := &CommittedStatesQ{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
