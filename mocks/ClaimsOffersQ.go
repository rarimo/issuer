// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	data "gitlab.com/q-dev/q-id/issuer/internal/data"
)

// ClaimsOffersQ is an autogenerated mock type for the ClaimsOffersQ type
type ClaimsOffersQ struct {
	mock.Mock
}

// Get provides a mock function with given fields: id
func (_m *ClaimsOffersQ) Get(id string) (*data.ClaimOffer, error) {
	ret := _m.Called(id)

	var r0 *data.ClaimOffer
	if rf, ok := ret.Get(0).(func(string) *data.ClaimOffer); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*data.ClaimOffer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: claimOffer
func (_m *ClaimsOffersQ) Insert(claimOffer *data.ClaimOffer) error {
	ret := _m.Called(claimOffer)

	var r0 error
	if rf, ok := ret.Get(0).(func(*data.ClaimOffer) error); ok {
		r0 = rf(claimOffer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// New provides a mock function with given fields:
func (_m *ClaimsOffersQ) New() data.ClaimsOffersQ {
	ret := _m.Called()

	var r0 data.ClaimsOffersQ
	if rf, ok := ret.Get(0).(func() data.ClaimsOffersQ); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(data.ClaimsOffersQ)
		}
	}

	return r0
}

// Update provides a mock function with given fields: claimOffer
func (_m *ClaimsOffersQ) Update(claimOffer *data.ClaimOffer) error {
	ret := _m.Called(claimOffer)

	var r0 error
	if rf, ok := ret.Get(0).(func(*data.ClaimOffer) error); ok {
		r0 = rf(claimOffer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewClaimsOffersQ interface {
	mock.TestingT
	Cleanup(func())
}

// NewClaimsOffersQ creates a new instance of ClaimsOffersQ. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClaimsOffersQ(t mockConstructorTestingTNewClaimsOffersQ) *ClaimsOffersQ {
	mock := &ClaimsOffersQ{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
